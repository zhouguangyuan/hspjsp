package com.hsp.utils;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class SqlHelper {
	private Connection ct = null;
	private ResultSet rs = null;
	private PreparedStatement ps = null;

	// 连接数据库参数
	private static String url = "";
	private static String drivername = "";
	private static String username = "";
	private static String password = "";
	private static InputStream fiS;

	// 加载驱动，一次
	static {
		Properties pp = new Properties();
		try {
			fiS = SqlHelper.class.getClassLoader().getResourceAsStream(
					"mysql.properties");
			pp.load(fiS);
			// 属性文件读取信息
			drivername = pp.getProperty("dbDriver");
			username = pp.getProperty("dbUserName");
			password = pp.getProperty("dbPassWord");
			url = pp.getProperty("dbUrl");
			Class.forName(drivername);
			System.out.print("得到数据源");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				fiS.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/** 传入表名，返回该表的记录数* */
	public int getRowCount(String sql) {
		int rowCount = 0;
		ct = getConnection();
		try {
			ps = ct.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				rowCount = rs.getInt(1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			closeResource(rs, ps, ct);
		}
		return rowCount;
	}

	public Connection getConnection() {
		try {
			ct = DriverManager.getConnection(url, username, password);// 注意配置文件
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ct;// 谁调用谁拿到Connection
	}

	private void closeResource(ResultSet rs, PreparedStatement ps, Connection ct) {
		// 关闭资源(先开后关)
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			rs = null;
		}
		if (ps != null) {
			try {
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			ps = null;
		}
		if (null != ct) {
			try {
				ct.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			ct = null;
		}
	}

	public Connection getCt() {
		return ct;
	}

	public PreparedStatement getPs() {
		return ps;
	}

	public ResultSet getRs() {
		return rs;
	}

	public int getRowCount(String sql, String[] paras) {
		int rowCount = 0;
		ct = getConnection();
		try {
			ps = ct.prepareStatement(sql);
			if (paras != null) {
				for (int i = 0; i < paras.length; i++) {
					ps.setString(i + 1, paras[i]);
				}
			}
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				rowCount = rs.getInt(1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			closeResource(rs, ps, ct);
		}
		return rowCount;
	}

	public ArrayList executeQuery(String sql, String paras[]) {
		ArrayList al = new ArrayList();
		DBUtil dbu = new DBUtil();
		try {
			ct = dbu.getConn();
			ps = ct.prepareStatement(sql);
			for (int i = 0; i < paras.length; i++) {
				ps.setString(i + 1, paras[i]);
			}
			rs = ps.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			int columnNum = rsmd.getColumnCount();
			while (rs.next()) {
				Object objects[] = new Object[columnNum];
				for (int i = 0; i < objects.length; i++) {
					objects[i] = rs.getObject(i + 1);
				}
				al.add(objects);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbu.close();
		}
		return al;
	}
}